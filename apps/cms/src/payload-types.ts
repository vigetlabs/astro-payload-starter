/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    categories: Category;
    media: Media;
    pages: Page;
    posts: Post;
    'reusable-content': ReusableContent;
    users: User;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    footer: Footer;
    header: Header;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  layout: (
    | {
        imageFields: ImageFields;
        id?: string | null;
        blockName?: string | null;
        blockType: 'image';
      }
    | {
        logoGridFields?: LogoGridFields;
        id?: string | null;
        blockName?: string | null;
        blockType: 'logoGrid';
      }
    | {
        reusableContentFields: {
          reusableContent: string | ReusableContent;
          customId?: string | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'reusableContent';
      }
    | {
        textFields?: TextFields;
        id?: string | null;
        blockName?: string | null;
        blockType: 'text';
      }
  )[];
  slug: string;
  meta?: SeoData;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageFields".
 */
export interface ImageFields {
  image: string | Media;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  caption_html?: string | null;
  width?: ('content' | 'popout' | 'feature' | 'full') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoGridFields".
 */
export interface LogoGridFields {
  logos?:
    | {
        logo: string | Media;
        id?: string | null;
      }[]
    | null;
  width?: ('content' | 'popout' | 'feature' | 'full') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reusable-content".
 */
export interface ReusableContent {
  id: string;
  title: string;
  layout: (
    | {
        imageFields: ImageFields;
        id?: string | null;
        blockName?: string | null;
        blockType: 'image';
      }
    | {
        logoGridFields?: LogoGridFields;
        id?: string | null;
        blockName?: string | null;
        blockType: 'logoGrid';
      }
    | {
        textFields?: TextFields;
        id?: string | null;
        blockName?: string | null;
        blockType: 'text';
      }
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextFields".
 */
export interface TextFields {
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  text_html?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SeoData".
 */
export interface SeoData {
  title?: string | null;
  description?: string | null;
  image?: string | Media | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  image?: string | Media | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  content_html?: string | null;
  relatedPosts?: (string | Post)[] | null;
  slug: string;
  authors?: (string | User)[] | null;
  categories?: (string | Category)[] | null;
  meta?: SeoData;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  roles: ('admin' | 'user')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  navColumns?:
    | {
        label: string;
        navItems?:
          | {
              link: LinkField;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkField".
 */
export interface LinkField {
  type?: ('reference' | 'custom') | null;
  newTab?: boolean | null;
  reference?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null);
  url?: string | null;
  label: string;
  appearance?: ('default' | 'primary' | 'secondary') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  tabs?:
    | {
        type: 'directLink' | 'dropdown';
        label?: string | null;
        link: LinkField;
        dropdownLinks?:
          | {
              link: LinkField;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  ctas?:
    | {
        link: LinkField;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}